# app_final_analytics_fixed_v2.py
import streamlit as st
import pandas as pd

st.set_page_config(layout="wide")

# --- –§–£–ù–ö–¶–Ü–á ---

def generate_initial_data(start_price, price_step_pct, start_laz, laz_increase_pct, leverage, num_steps):
    """–ì–µ–Ω–µ—Ä—É—î –ø–æ—á–∞—Ç–∫–æ–≤–∏–π DataFrame –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–∞–¥–∞–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª."""
    steps = []
    current_price = start_price
    added_laz = start_laz

    for i in range(1, num_steps + 1):
        steps.append({
            "‚Ññ –ö—Ä–æ–∫—É": i,
            "–¶—ñ–Ω–∞ –≤—Ö–æ–¥—É ($)": current_price,
            "–û–±'—î–º LAZ –¥–æ–¥–∞–Ω–∏–π": round(added_laz, 2),
            "–ü–ª–µ—á–µ": leverage
        })
        current_price *= (1 + price_step_pct / 100)
        added_laz *= (1 + laz_increase_pct / 100)
    
    return pd.DataFrame(steps)


def recalculate_strategy(df: pd.DataFrame):
    """–ü–æ–≤–Ω—ñ—Å—Ç—é –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î –≤—Å—ñ –∑–∞–ª–µ–∂–Ω—ñ —Å—Ç–æ–≤–ø—á–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö."""
    
    new_df = df.copy()
    initial_start_price = new_df.loc[0, '–¶—ñ–Ω–∞ –≤—Ö–æ–¥—É ($)'] if not new_df.empty else 0
    
    total_margin = 0.0
    total_laz = 0.0
    total_value = 0.0

    for i, row in new_df.iterrows():
        price = row['–¶—ñ–Ω–∞ –≤—Ö–æ–¥—É ($)']
        laz_added = row["–û–±'—î–º LAZ –¥–æ–¥–∞–Ω–∏–π"]
        leverage = row['–ü–ª–µ—á–µ']

        added_size_usd = laz_added * price
        added_margin = added_size_usd / leverage

        total_margin += added_margin
        total_laz += laz_added
        total_value += added_size_usd
        
        avg_price = total_value / total_laz if total_laz > 0 else 0
        liquidation_price = 0
        if total_margin > 0:
            effective_leverage = total_value / total_margin
            liquidation_price = avg_price * (1 + 1 / effective_leverage)

        safety_margin_percent = ((liquidation_price - price) / price) * 100 if price > 0 else 0
        total_protection_percent = ((liquidation_price - initial_start_price) / initial_start_price) * 100 if initial_start_price > 0 else 0
        status = "‚úÖ –ë–µ–∑–ø–µ—á–Ω–æ" if liquidation_price > price else "‚ùå –ù–µ–±–µ–∑–ø–µ—á–Ω–æ"
        
        new_df.loc[i, '–†–æ–∑–º—ñ—Ä –¥–æ–¥–∞–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó ($)'] = round(added_size_usd, 2)
        new_df.loc[i, '–ú–∞—Ä–∂–∞ –¥–æ–¥–∞–Ω–∞ –Ω–∞ –∫—Ä–æ—Ü—ñ ($)'] = round(added_margin, 2)
        new_df.loc[i, '–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∫–ª–∞–¥–µ–Ω–∞ –º–∞—Ä–∂–∞ ($)'] = round(total_margin, 2)
        new_df.loc[i, "–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±'—î–º LAZ"] = round(total_laz, 2)
        new_df.loc[i, '–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞ –≤—Ö–æ–¥—É ($)'] = round(avg_price, 4)
        new_df.loc[i, '–¶—ñ–Ω–∞ –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó ($)'] = round(liquidation_price, 4)
        new_df.loc[i, '–°—Ç–∞–Ω –≤—Ö–æ–¥—É'] = status
        new_df.loc[i, '–ó–∞–ø–∞—Å –≤—ñ–¥ –≤—Ö–æ–¥—É (%)'] = f"{safety_margin_percent:.1f}%"
        new_df.loc[i, '–ó–∞–≥–∞–ª—å–Ω–∏–π –∑–∞—Ö–∏—Å—Ç (%)'] = f"{total_protection_percent:.1f}%"
        
    return new_df

# --- –Ü–ù–¢–ï–†–§–ï–ô–° STREAMLIT ---
st.title("‚ö° –î–∏–Ω–∞–º—ñ—á–Ω–∏–π 'What-If' –°–∏–º—É–ª—è—Ç–æ—Ä –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó")

with st.sidebar:
    st.header("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Å—ñ—Ç–∫–∏")
    # ... (–∫–æ–¥ –±—ñ—á–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è)
    num_steps = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–æ–∫—ñ–≤", min_value=5, max_value=100, value=20)
    start_price = st.number_input("–ü–æ—á–∞—Ç–∫–æ–≤–∞ —Ü—ñ–Ω–∞ ($)", value=0.5, format="%.4f")
    price_step_pct = st.number_input("–ö—Ä–æ–∫ —Ü—ñ–Ω–∏ (%)", value=2.0)
    start_laz = st.number_input("–°—Ç–∞—Ä—Ç–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å LAZ", value=2.0)
    laz_increase_pct = st.number_input("–ó–±—ñ–ª—å—à–µ–Ω–Ω—è LAZ –Ω–∞ –∫—Ä–æ—Ü—ñ (%)", value=20.0)
    leverage = st.number_input("–ü–ª–µ—á–µ (–¥–ª—è –≤—Å—ñ—Ö –∫—Ä–æ–∫—ñ–≤)", value=1.5, format="%.1f")

    if st.button("–°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ / –°–∫–∏–Ω—É—Ç–∏", type="primary"):
        initial_df = generate_initial_data(start_price, price_step_pct, start_laz, laz_increase_pct, leverage, num_steps)
        st.session_state.strategy_df = initial_df
        st.rerun()

if 'strategy_df' not in st.session_state or st.session_state.strategy_df.empty:
    st.info("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ / –°–∫–∏–Ω—É—Ç–∏' –Ω–∞ –±—ñ—á–Ω—ñ–π –ø–∞–Ω–µ–ª—ñ, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤—É —Ç–∞–±–ª–∏—Ü—é.")
else:
    recalculated_df = recalculate_strategy(st.session_state.strategy_df)
    last_step = recalculated_df.iloc[-1]
    
    st.header("üìà –ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π —Å—Ç–∞–Ω –ø–æ–∑–∏—Ü—ñ—ó")
    cols = st.columns(5)
    cols[0].metric("–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞ –≤—Ö–æ–¥—É", f"${last_step['–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞ –≤—Ö–æ–¥—É ($)']:.4f}")
    cols[1].metric("–¶—ñ–Ω–∞ –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó", f"${last_step['–¶—ñ–Ω–∞ –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó ($)']:.4f}")
    cols[2].metric("–ó–∞–≥–∞–ª—å–Ω–∞ –º–∞—Ä–∂–∞", f"${last_step['–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∫–ª–∞–¥–µ–Ω–∞ –º–∞—Ä–∂–∞ ($)']:.2f}")
    
    # --- –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –¢–£–¢ ---
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–¥–Ω–∞–∫–æ–≤—ñ –ª–∞–ø–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–ª—é—á–∞
    cols[3].metric("–ó–∞–≥–∞–ª—å–Ω–∏–π –∑–∞—Ö–∏—Å—Ç (%)", last_step["–ó–∞–≥–∞–ª—å–Ω–∏–π –∑–∞—Ö–∏—Å—Ç (%)"])
    cols[4].metric("–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±'—î–º (LAZ)", f"{last_step['–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±\'—î–º LAZ']:.2f}")
    # -------------------------
    
    st.divider()
    
    st.header("–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó")
    
    display_columns = [
        "‚Ññ –ö—Ä–æ–∫—É", "–¶—ñ–Ω–∞ –≤—Ö–æ–¥—É ($)", "–û–±'—î–º LAZ –¥–æ–¥–∞–Ω–∏–π", "–ü–ª–µ—á–µ", "–°—Ç–∞–Ω –≤—Ö–æ–¥—É",
        "–ú–∞—Ä–∂–∞ –¥–æ–¥–∞–Ω–∞ –Ω–∞ –∫—Ä–æ—Ü—ñ ($)", "–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∫–ª–∞–¥–µ–Ω–∞ –º–∞—Ä–∂–∞ ($)", "–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±'—î–º LAZ",
        "–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞ –≤—Ö–æ–¥—É ($)", "–¶—ñ–Ω–∞ –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó ($)", "–ó–∞–ø–∞—Å –≤—ñ–¥ –≤—Ö–æ–¥—É (%)", "–ó–∞–≥–∞–ª—å–Ω–∏–π –∑–∞—Ö–∏—Å—Ç (%)"
    ]
    disabled_columns = [col for col in display_columns if col not in ["–¶—ñ–Ω–∞ –≤—Ö–æ–¥—É ($)", "–û–±'—î–º LAZ –¥–æ–¥–∞–Ω–∏–π", "–ü–ª–µ—á–µ"]]

    edited_df = st.data_editor(
        recalculated_df[display_columns],
        disabled=disabled_columns,
        num_rows="dynamic",
        hide_index=True,
        key="data_editor"
    )

    if not edited_df.equals(recalculated_df[display_columns]):
        st.session_state.strategy_df = edited_df
        st.rerun()
